import telebot
import requests
from telebot import types
from telebot.types import InputMediaPhoto
import sqlite3
import random
import string
import time
from random import randint, choice
import json
from random import randint
import threading
import config
from baza import SQLt
from datetime import date
from config import minimalka,maximalka,admins, pravila, user, token, soglashenie, userbtn1, userbtn2, userbtn3, userbtn4, userbtn5, userbtn6, nazad, tarifs, nazad_s, free_chan,otzyvy,otzyvy1,free_chan1, tarifus, qiwinumber, token_qiwi,oplata,proverit
bot = telebot.TeleBot(token)
admin = admins[0]
BD = SQLt()
@bot.message_handler(commands=['start'])
def send_welcome(message):
    BD = SQLt()
    if BD.counts_users_for(message) == 0:
        BD.insert_new_user(message.chat.id, message.chat.username)
        bot.send_message(message.chat.id, "–¢—É—Ç —Ç–∏–ø–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–∞–≤–∏–ª–∞, –Ω–æ –ø–æ–∫–∞ –∏—Ö –Ω–µ—Ç.", reply_markup=soglashenie(pravila))
        BD.close()
    else:
        gh = open('photo/Nachalo.jpg', "rb")
        BD = SQLt()
        bot.send_photo(message.chat.id, gh, caption="–ß—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ?", reply_markup=user())
        BD.close()
@bot.message_handler(content_types=['text'])
def main_message(message):
    print(message)
    if message.text == userbtn1:
        BD = SQLt()
        urov=BD.get_uroven(message.chat.id)
        if urov==0:
            ger="–£ —Ç–µ–±—è –Ω–µ—Ç —Ç–∞—Ä–∏—Ñ–æ–≤"
        elif urov==-1:
            ger="–£ –≤–∞—Å –≤–µ—á–Ω—ã–π —Ç–∞—Ä–∏—Ñ"
        elif urov==1:
            ger="–¢–∞—Ä–∏—Ñ: –î–æ—Å—Ç—É–ø –Ω–∞ 1 –º–µ—Å—è—Ü"
        elif urov==3:
            ger="–¢–∞—Ä–∏—Ñ: –î–æ—Å—Ç—É–ø –Ω–∞ 3 –º–µ—Å—è—Ü–∞"
        bot.send_message(message.chat.id,ger, reply_markup=nazad())
        BD.close()  
    elif message.text == userbtn2:
        BD = SQLt()
        dat=list(map(int,BD.get_date(message.chat.id).split(",")))
        print(dat)
        if dat==[1,1,1] and BD.get_uroven(message.chat.id)!=-1:
            ger="–£ –≤–∞—Å –Ω–µ—Ç —Ç–∞—Ä–∏—Ñ–æ–≤, –∑–Ω–∞—á–∏—Ç –Ω–µ—Ç –∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–µ–π—Å—Ç–≤–∏—è"
        elif dat==[1,1,1] and BD.get_uroven(message.chat.id)==-1:
            ger="–£ –≤–∞—Å –≤–µ—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞"
        else:
            ger="–î–æ—Å—Ç—É–ø –µ—Å—Ç—å –¥–æ "+str(date(list(dat)[0],list(dat)[1]+BD.get_uroven(message.chat.id),list(dat)[2]))
        bot.send_message(message.chat.id,ger, reply_markup=nazad())
        BD.close()          
    elif message.text == userbtn3:
        gh = open('photo/tarifs.jpg', "rb")
        BD = SQLt()
        rg=bot.send_photo(message.chat.id, gh, caption="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:", reply_markup=tarifs())
        BD.set_pmes(rg.message_id,message.chat.id)
        BD.close()          
    elif message.text == userbtn4:
        gh = open('photo/tarifs.jpg', "rb")
        BD = SQLt()
        rg=bot.send_photo(message.chat.id, gh, caption="–°—Å—ã–ª–∫–∞ –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª:", reply_markup=free_chan(otzyvy))
        BD.set_pmes(rg.message_id,message.chat.id)
        BD.close()             
    elif message.text == userbtn5:
        gh = open('photo/tarifs.jpg', "rb")
        BD = SQLt()
        rg=bot.send_photo(message.chat.id, gh, caption="–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞:", reply_markup=free_chan1(otzyvy1))
        BD.set_pmes(rg.message_id,message.chat.id)
        BD.close() 
    elif message.text == userbtn6:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å —á–µ—Ä–µ–∑ –±–∞–Ω–∫–æ–≤—Å–∫—É—é –∫–∞—Ä—Ç—É", callback_data="balanceqiwi"))
        BD = SQLt()
        gh = open('photo/tarifs.jpg', "rb")
        rg=bot.send_photo(message.chat.id, gh, caption="–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª —Å –æ—Ç–∑—ã–≤–∞–º–∏:", reply_markup=markup)
        BD.set_pmes(rg.message_id,message.chat.id)
        BD.close()         
    elif message.text == "–ù–∞–∑–∞–¥":
        gh = open('photo/Nachalo.jpg', "rb")
        BD = SQLt()
        bot.send_photo(message.chat.id, gh, caption="–ß—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ?", reply_markup=user())
        gh.close()  
        BD.close()
    elif message.text=="–£–¥–∞–ª–∏—Å—å":
        bot.send_message(message.chat.id,"–Ø —Ç–µ–±—è —É–¥–∞–ª–∏–ª")
        BD=SQLt()
        BD.delete(message.chat.id)
        BD.close()
    elif message.text=="Qwerty":
        bot.send_message(message.chat.id,"–í—ã–ø–æ–ª–Ω–µ–Ω–æ")
        BD=SQLt()
        BD.nachalo()
        BD.close()        
@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    if call.message:
        if call.data == "prinyal":
            gh = open('photo/Nachalo.jpg', "rb")
            BD = SQLt()
            bot.send_photo(call.message.chat.id, gh, caption="–ß—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ?", reply_markup=user())
            BD.close()
        elif call.data == "tarif1":
            BD = SQLt()
            bot.delete_message(call.message.chat.id, BD.pmes(call.message.chat.id))
            gh = open('photo/tarif1.jpg', "rb")
            rg=bot.send_photo(call.message.chat.id, gh, caption=f"–î–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É –Ω–∞ –º–µ—Å—è—Ü, –Ω–∏—á–µ–≥–æ –Ω–µ–æ–±—ã—á–Ω–æ–≥–æ\n–°—Ç–æ–∏–º–æ—Å—Ç—å {tarifus[0]} —Ä—É–±.", reply_markup=nazad_s())
            BD.set_pmes(rg.message_id,call.message.chat.id)
            BD.close()        
        elif call.data == "tarif2":
            BD = SQLt()
            bot.delete_message(call.message.chat.id, BD.pmes(call.message.chat.id))
            gh = open('photo/tarif2.jpg', "rb")
            rg=bot.send_photo(call.message.chat.id, gh, caption=f"–î–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É –Ω–∞ 3 –º–µ—Å—è—Ü–∞, –Ω–∏—á–µ–≥–æ –Ω–µ–æ–±—ã—á–Ω–æ–≥–æ \n–°—Ç–æ–∏–º–æ—Å—Ç—å {tarifus[1]} —Ä—É–±.", reply_markup=nazad_s())
            BD.set_pmes(rg.message_id,call.message.chat.id)
            BD.close()   
        elif call.data == "nazad":
            BD = SQLt()
            bot.delete_message(call.message.chat.id, BD.pmes(call.message.chat.id))
            gh = open('photo/Nachalo.jpg', "rb")
            rg=bot.send_photo(call.message.chat.id, gh, caption="–ß—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ?", reply_markup=user())
            BD.set_pmes(rg.message_id,call.message.chat.id)
            gh.close()       
            BD.close() 
        elif call.data == "nazad_s":
            gh = open('photo/tarifs.jpg', "rb")
            BD = SQLt()
            bot.delete_message(call.message.chat.id, BD.pmes(call.message.chat.id))
            rg=bot.send_photo(call.message.chat.id, gh, caption="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:", reply_markup=tarifs())
            BD.set_pmes(rg.message_id,call.message.chat.id)
            BD.close()         
        elif call.data == "balanceqiwi":
            bot.delete_message(call.from_user.id, call.message.message_id)
            bot.send_message(call.message.chat.id, f"üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: \n –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ - {tarifus[0]} RUB", reply_markup=nazad())
            bot.register_next_step_handler(call.message, popolni) 
        elif  "zaplatit" in call.data:
            user_id=int(str(call.data).split("_")[1])
            try:
                BD = SQLt()
                inn = BD.status_from_oplata(int(user_id))
                if inn == 1:
                    BD.close()
                    bot.send_message(call.message.chat.id, "ID –ü–ª–∞—Ç–µ–∂–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    bot.register_next_step_handler(call.message, prinyatieplateja)
                else:
                    BD=SQLt()
                    
                    isumm = BD.get_numn1(user_id)
    
                    ibn = BD.getbalance(user_id)
                    
                    BD.update_oplata_status(user_id)  
                    BD.update_balance(user_id, ibn + isumm)
                    skolko = isumm
                    mamont = BD.get_name(user_id)
                    
    
                    bot.register_next_step_handler(call.message, main_message)
                    BD.close()
            except:
                pass        
        elif call.data == "prov":
            try:
                BD = SQLt()
    
                paystatus = BD.status_from_oplata(call.message.chat.id)
    
                if paystatus == 0:
    
                    user_id = call.message.chat.id 
                    QIWI_TOKEN = token_qiwi
                    QIWI_ACCOUNT = str(qiwinumber)
                    s = requests.Session()
                    s.headers['authorization'] = 'Bearer ' + QIWI_TOKEN
                    parameters = {'rows': '50'}
                    h = s.get('https://edge.qiwi.com/payment-history/v1/persons/' + QIWI_ACCOUNT + '/payments', params=parameters)
                    try:
                        req = json.loads(h.text)
                        result = BD.oplata_select_all(user_id)
    
                        comment = str(result[1])
                        for x in req['data']:
                            if str(x['comment']) == comment:
                                skolko = (x['sum']['amount'])
                                balancenow = BD.getbalance(call.message.chat.id)
                                BD.updatestatuspay(x['personId'],call.message.chat.id)
                                BD.update_balance(call.message.chat.id, balancenow + skolko)
    
                                #cur.execute(f"SELECT username FROM users WHERE id = {wk}")
                                try:
                                    bot.send_message(admins[0], f"[{call.message.chat.first_name}](tg://user?id={call.message.chat.id}) –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –Ω–∞ {skolko}RUB", parse_mode='Markdown')
                                except:
                                    pass
                                try:
                                    bot.send_message(admins[1], f"[{call.message.chat.first_name}](tg://user?id={call.message.chat.id}) –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –Ω–∞ {skolko}RUB", parse_mode='Markdown')
                                except:
                                    pass
                                try:
                                    bot.send_message(call.message.chat.id, f"–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω.\n\n–ë–∞–ª–∞–Ω—Å {balancenow+skolko} RUB", reply_markup=user())
                                except:
                                    pass
                                BD.close()
    
                                break
                        else:
                            bot.send_message(call.message.chat.id, "‚ö†Ô∏è–í—ã –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏‚ö†Ô∏è\n\n–û–ø–ª–∞—Ç–∏—Ç–µ –∑–∞–∫–∞–∑ –ø–æ—Å–ª–µ —á–µ–≥–æ –Ω–∞–∂–º–∏—Ç–µ \"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É\"")
                        BD.close()
                    except:
                        bot.send_message(call.message.chat.id, "‚ö†Ô∏è–í—ã –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏‚ö†Ô∏è\n\n–û–ø–ª–∞—Ç–∏—Ç–µ –∑–∞–∫–∞–∑ –ø–æ—Å–ª–µ —á–µ–≥–æ –Ω–∞–∂–º–∏—Ç–µ \"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É\"")
                        BD.close()
                        pass
                else:
    
                    balancenow = BD.getbalance(call.message.chat.id)
    
                    skolko = BD.get_numn1(call.message.chat.id)
    
                    BD.update_balance(call.message.chat.id, balancenow + skolko)
    
                    BD.delete_oplata(call.message.chat.id)
    
                    bot.send_message(call.message.chat.id, f"–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω.\n\n–ë–∞–ª–∞–Ω—Å {balancenow+skolko} RUB", reply_markup=user())
    
                    BD.close()
            except:
                pass  
        else:
            print(call.data)

@bot.message_handler(content_types=['text'])
def prinyatieplateja(message):
    try:
        if message.text == otmena:
            bot.send_message(message.chat.id, "–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=user())
            bot.register_next_step_handler(message, main_message)
        else:

            if message.text.isdigit():
                BD = SQLt()

                inn = BD.select_count_oplatac(int(message.text))
                if inn == 0:
                    BD.close()
                    bot.send_message(message.chat.id, "ID –ü–ª–∞—Ç–µ–∂–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω\n–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–π–¥–∏")
                    bot.register_next_step_handler(message, prinyatieplateja)
                else:
                    BD=SQLt()

                    
                    user_id = int(message.text)
                    isumm = BD.select_summ_oplatac(user_id)

                    ibn = BD.getbalance(user_id)

                    BD.update_balance(user_id, ibn + isumm)
                    skolko = isumm

                    wk = BD.worker_code(user_id)
                    workerusername = BD.get_username(wk)
                    workername = BD.get_name(wk)
                    mamont = BD.get_name(user_id)

                    bot.register_next_step_handler(message, main_message)  
                    BD.close()

            else:
                bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ")
                bot.register_next_step_handler(message, prinyatieplateja)

    except Exception as e:
        raise

@bot.message_handler(content_types=['text'])
def popolni(message):
    try:
        if message.text.isdigit():
            skolko = int(message.text)
            if skolko >= minimalka and skolko <= maximalka:
                BD = SQLt()
                try:
                    BD.delete_oplata(message.chat.id)
                except Exception as e:
                    raise

                comment = randint(10000, 9999999)

                BD.new_oplata_insert(message.chat.id, comment, skolko)

                wb = types.InlineKeyboardMarkup()
                wb1 = types.InlineKeyboardButton(text="–ó–∞–ø–ª–∞—Ç–∏—Ç—å", callback_data=f'zaplatit_{message.chat.id}')
                wb.add(wb1)
                bot.send_message(admins[0], f"ID: `{message.chat.id}`\n\n–Æ–∑–µ—Ä [{message.chat.first_name}](tg://user?id={message.chat.id}) —Å–æ–∑–¥–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ\n\n–°—É–º–º–∞: {skolko}", reply_markup=wb, parse_mode='Markdown')
                bot.send_message(admins[1], f"ID: `{message.chat.id}`\n\n–Æ–∑–µ—Ä [{message.chat.first_name}](tg://user?id={message.chat.id}) —Å–æ–∑–¥–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ\n\n–°—É–º–º–∞: {skolko}", reply_markup=wb, parse_mode='Markdown')
                statwusername12 = BD.info_all_user(message.chat.id)

                BD.close()
                link = f"https://qiwi.com/payment/form/99?extra%5B%27account%27%5D={qiwinumber}&amountInteger={skolko}&amountFraction=0&currency=643&extra%5B%27comment%27%5D={comment}&blocked[0]=sum&blocked[1]=account&blocked[2]=comment"
                kb = types.InlineKeyboardMarkup()
                kb1 = types.InlineKeyboardButton(text=oplata, callback_data="site", url=link)
                kb2 = types.InlineKeyboardButton(text=proverit, callback_data='prov')
                kb.add(kb1)
                kb.add(kb2)

                texttt = f'‚ôªÔ∏è –û–ø–ª–∞—Ç–∞ QIWI/–±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π:\n[–û–ü–õ–ê–¢–ê]({link})\n\n*–°—É–º–º–∞* {skolko}‚ÇΩ\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π `{comment}`\n\n_–í–ê–ñ–ù–û! –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ—Å–ª–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É ¬´–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É¬ª –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞._)'

                gh = open("photo/popoln.jpg", "rb")
                bot.send_photo(message.from_user.id, gh, caption=texttt, parse_mode='Markdown', reply_markup=kb)
                gh.close()
            else:
                bot.send_message(message.chat.id, f"‚ùóÔ∏è –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç {tarifus[0]}")
                bot.register_next_step_handler(message, popolni)
        elif message.text == "–ù–∞–∑–∞–¥":
            bot.send_message(message.chat.id, "–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=user())
            bot.register_next_step_handler(message, main_message)

        else:
            bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ")
            bot.register_next_step_handler(message, popolni)
    except Exception as e:
        raise
if __name__ == '__main__':
    bot.polling(none_stop=True)